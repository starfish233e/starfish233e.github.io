<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/24/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"/>
    <url>/2024/06/24/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>title: 科学上网教程<br />date: 24-06-24<br />tags:</p><ul><li>科学上网</li><li>clash<br />categories: 技术</li></ul><h1 id="网络代理"><a class="markdownIt-Anchor" href="#网络代理"></a> 网络代理</h1><h2 id="常用软件"><a class="markdownIt-Anchor" href="#常用软件"></a> 常用软件</h2><p>全平台通用（主流）：Clash Verge Rev, V2Ray<br />Windows: Trojan, shadowrockets<br />MacOS: Surge, shadowrocket<br />Android: Surfboard(强推), Clash for Android, V2RayN</p><p>由于国内的搜索屏蔽，因此百度等搜索引擎无法直接搜到下载链接，这里推荐使用 Bing 搜索引擎国际版（注意：一定是国际版！！！）搜索“Clash Verge Rev”。这里给出 clash verge rev 的下载地址：<a href="https://clashverge.net/clash-verge-rev/">https://clashverge.net/clash-verge-rev/</a></p><h2 id="vpn不推荐"><a class="markdownIt-Anchor" href="#vpn不推荐"></a> VPN（不推荐）</h2><p>免费：Proton VPN, Privado VPN<br />付费：快连 VPN</p><h2 id="机场"><a class="markdownIt-Anchor" href="#机场"></a> 机场</h2><p>笔者自己用的是追云加速的季付套餐，有几个小机场的流量套餐备用。这里不作推荐，读者可以自行上<a href="https://www.duyaoss.com/">毒药</a>查看机场测评</p><h1 id="使用教程"><a class="markdownIt-Anchor" href="#使用教程"></a> 使用教程</h1><p>VPN 应用是一键直连，这里给出网络代理软件的使用方法。<br />应用安装在 D 盘，之后把机场的链接(URL)导入到软件之中，之后在设置中打开“系统代理”即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024 新高考一卷语文作文分析</title>
    <link href="/2024/06/07/2024-%E6%96%B0%E9%AB%98%E8%80%83%E4%B8%80%E5%8D%B7%E8%AF%AD%E6%96%87%E4%BD%9C%E6%96%87%E5%88%86%E6%9E%90/"/>
    <url>/2024/06/07/2024-%E6%96%B0%E9%AB%98%E8%80%83%E4%B8%80%E5%8D%B7%E8%AF%AD%E6%96%87%E4%BD%9C%E6%96%87%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-新高考一卷语文作文分析"><a class="markdownIt-Anchor" href="#2024-新高考一卷语文作文分析"></a> 2024 新高考一卷语文作文分析</h1><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><blockquote><p><em>阅读下面的材料，根据要求写作。（60分）<br><br />随着互联网的普及、人工智能的应用，越来越多的问题能很快得到答案。那么，我们的问题是否会越来越少？ <br><br />以上材料引发了你怎样的联想和思考？请写一篇文章。<br><br />要求：选准角度，确定立意，明确文体，自拟标题；不要套作，不得抄袭；不得泄露个人信息；不少于800字。</em></p></blockquote><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>本题以生成式人工智能为抓手，提出 “问题的多与少” 这个话题。应当紧抓 “提出问题” 来展开议论。有趣的是，如果人类能问出的问题越来越少，那么 AI 会不会代替我们提问。我们完全可以使用 AI 或者通过网络引擎进行更聪明的提问。关键不仅仅是问题的多与少，而且是问题的深度、广度、相关度以及能不能启发更多的东西。其次，不是所有问题都能得到一个好答案，AI 固然可以回答你的问题，但是它无法保障答案的质量，事实上，生成式大模型存在的 “幻觉” 仍然是 AI 至今无法克服的问题。我们可以说，如果我们提出了一个好问题，它只得到了低质量的回答，那么我们可能会提出更多的问题，我们会进一步追问 AI，或者转而请求更有经验的人帮助我们。</p><h2 id="立论"><a class="markdownIt-Anchor" href="#立论"></a> 立论</h2><p>正向：AI 时代获得的只是浅显的解答，不是真正的答案，我们会提出更多的问题</p><p>反向：更容易获得答案，我们更容易得到解答的心理满足，从而放弃了进一步追问</p><h2 id="思辨"><a class="markdownIt-Anchor" href="#思辨"></a> 思辨</h2><p>1.得到的解答不一定是高质量的答案<br />2.如果回答没有解决我们的困惑，我们会接着提问<br />3.高质量的回答可以促进思考，从而引发更多的提问<br />4.互联网和人工智能的技术进步带来了新问题<br />5.可以利用互联网和人工智能帮助我们提问</p><h2 id="立意"><a class="markdownIt-Anchor" href="#立意"></a> 立意</h2><p>1.一个好问题更容易带来高质量的回答，所以学会使用更少的高质量提问获得高效回答，是当今时代的必修课<br />2.回答质量良莠不齐，必须养成自我思考的好习惯，才能判断真正的好回答</p><p><img src="/img/%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%9A%E4%B8%8E%E5%B0%91.png" alt="问题的多与少" /></p><h2 id="作文"><a class="markdownIt-Anchor" href="#作文"></a> 作文</h2><p>题目：AI 越多，问题越多</p><p>自从 2022 年 chatGPT 引爆生成式 AI 以来，我们似乎越来越依赖 AI 来解答我们的困惑。然而，AI 生成的答案质量存疑，答非所问甚至胡言乱语的情况亦不罕见，往往我们还需要通过其他方式进一步求索正解。因此，问题不是变少了而是变多了。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有人在世界的某处欢呼，我并不孤独</title>
    <link href="/2024/06/06/%E6%9C%89%E4%BA%BA%E5%9C%A8%E4%B8%96%E7%95%8C%E7%9A%84%E6%9F%90%E5%A4%84%E6%AC%A2%E5%91%BC%EF%BC%8C%E6%88%91%E5%B9%B6%E4%B8%8D%E5%AD%A4%E7%8B%AC/"/>
    <url>/2024/06/06/%E6%9C%89%E4%BA%BA%E5%9C%A8%E4%B8%96%E7%95%8C%E7%9A%84%E6%9F%90%E5%A4%84%E6%AC%A2%E5%91%BC%EF%BC%8C%E6%88%91%E5%B9%B6%E4%B8%8D%E5%AD%A4%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<center>    <h1>有人在世界的某处欢呼，我并不孤独</h1></center><h1 id="星舰"><a class="markdownIt-Anchor" href="#星舰"></a> 星舰</h1><p>星舰起飞是在 20：50，我提前了 50 分钟进入直播。这是星舰的第四次试射，前面三次我都没赶上发射的直播，这一次不想再留遗憾。晚上的电工实习于我而言索然无味，我盯着手上的电阻，陷入无聊。</p><p>焊完电路已经是 20：56，我又一次错过起飞的瞬间。Bilibili 的直播间都在欢呼一级回收成功，我看着周围的电烙铁们，恍惚间身处另一个世界。</p><p>回程的路上，第二级舰体正在再入大气，我看着屏幕上的等离子体，充满了毁灭性的流光溢彩。彷佛极光一般的景色此生都不会再忘记。和刚刚回看的发射场景一样，我想，这就是理工的浪漫，我为见证人类迈进星际时代而骄傲。</p><p>路上的情侣卿卿我我，行人匆匆，男生们成群结队讨论游戏的攻略，连月光都透露出无聊。我放下直播，听着耳机里传来的欢呼声，彷佛置身喧嚣的广场。网络带给我狂欢，我知道地球上的某处，人们正在欢呼，我并不孤独。</p><h1 id="孤独"><a class="markdownIt-Anchor" href="#孤独"></a> 孤独</h1><p>我很孤独。</p><p>当我连续三天对着电脑屏幕忙忙碌碌，当我不想再拿起书或者数学题集，当我一遍又一遍重复刷新着知乎，我知道，我陷入了孤独。我会在每一个发誓早睡的晚上找理由熬夜，会以自习的接口焦虑地翘课，会自我否定又自我膨胀。我很久没有跟贴心的朋友倾诉，也长久地缺少开怀大笑的时刻，过去肆无忌惮欢笑的日子总是让我怀念，尽管我知道我无法再一次体验。</p><p>网络搭建了虚幻的广场，我像山峰上的观光客，拿着望远镜观察着人群，远处传来的欢呼声令我欣喜不已。我喜欢星舰，喜欢 NBA，它们都是我故事的一部分。</p><p>我爱做梦，梦里就算是孤独也是惊心动魄。我依赖梦来构建活着的意义。如果无法做梦，我将陷入无意义的泥沼。换句话说，梦是我对贫乏现实的超越，是我走向天堂的桥梁。我需要梦，没有梦我就活不下去。</p><h1 id="探险"><a class="markdownIt-Anchor" href="#探险"></a> 探险</h1><p>SpaceX 是我伟大探险的一部分。我整日在网上冲浪，探索从未见过的领域，在不同的平台上注册新的账号。我急不可耐的想要知道一切问题的答案，哪怕只是最浅显，最缺乏思考的答案。我渴求知识就像瘾君子渴求毒品，质量已经不重要，能吸上一口就好。</p><p>冒险家的时代已经过去了吗？也许是的，我迷失在信息的海洋中，不知道怎样才能泅渡上岸。我为了知识牺牲了睡眠，却也拉高了思考的阈值。已经多少天没有深入思考过了呢？我不知道，但是没有思考的学习，只是淘金生下来的废料。即时你知道里面有金子的存在，你也无法从垃圾中把它分辨出来了。</p><p>我自诩的冒险其实只是在别人圈好的天地里转圈。冒险已经死亡。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Starship</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Markdown 写作 ospp 项目申请书</title>
    <link href="/2024/06/05/ospp%E7%94%B3%E8%AF%B7%E4%B9%A6%E5%86%99%E4%BD%9C/"/>
    <url>/2024/06/05/ospp%E7%94%B3%E8%AF%B7%E4%B9%A6%E5%86%99%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-markdown-写作-ospp-项目申请书"><a class="markdownIt-Anchor" href="#使用-markdown-写作-ospp-项目申请书"></a> 使用 Markdown 写作 ospp 项目申请书</h1><h2 id="项目申请书示例解析"><a class="markdownIt-Anchor" href="#项目申请书示例解析"></a> 项目申请书示例解析</h2><p><a href="/downloads/%E9%A1%B9%E7%9B%AE%E7%94%B3%E8%AF%B7%E4%B9%A6%E7%A4%BA%E4%BE%8B.pdf">项目申请书示例</a></p><h3 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h3><p>标题居中对齐，Markdown 没有原生的语法支持，这里考虑使用 html 语法实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>项目申请书<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>项目名称：通过 GitHub Actions 实现标准流程自动化<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>项目主导师：欧阳文<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>申请人：樊漆亮<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>日期：2021.05.04<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>邮箱：fanqiliang@torch-fan.site<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以在导出 pdf 文件之后使用 Word 或者 Adobe acrobat 等 pdf 编辑工具后期添加</p><h3 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h3><p>原作者使用的是 Typora 自带的目录生成功能，笔者则使用开源的 Markdown Preview Enhanced 插件生成目录。打开 VScode，按下 <code>Ctrl + shift + x</code> 搜索插件 <code>Markdown Preview Enhanced</code>，点击安装。打开 md 文档，在编辑模式下将光标置于你想要插入目录的位置，按下 <code>Ctrl + shift + p</code>，在弹出的菜单中搜索 <code>Markdown Preview Enhanced: Create TOC</code>，即可插入目录。</p><h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h4><p>目录需要保存文件之后才能看到，所以需要先按下 <code>Ctrl + s</code> 进行保存，更多的细节可以参见插件的<a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/toc">文档</a></p><hr /><p>原文中的分割线可以通过 Markdown 中的 <code>---</code> 来实现</p><hr /><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br><br>这是一段分割线<br><br>---<br></code></pre></td></tr></table></figure><h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3><p>正文写作就是正常的 Markdown 的写作，使用基础的 Markdown 语法即可。如果想要调整图片格式的，可以使用 html 语法，Markdown 兼容 html 语法，可以使用 css 格式实现很多效果。当然，如果你比较喜欢 Markdown 的简洁理念，这些就不在你的考虑范围之内了 &gt;_&lt;</p><h3 id="徽章"><a class="markdownIt-Anchor" href="#徽章"></a> 徽章</h3><h4 id="简单制作"><a class="markdownIt-Anchor" href="#简单制作"></a> 简单制作</h4><p>原文中使用了徽章制作，这是基于 <a href="https://shields.io">shields.io</a> 进行生成的。在官网的 Get Started 页面中，我们可以可以看见右侧有一个徽章制作栏：</p><center>    <img src="/img/shields.png" style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 "    width="65%" alt="图片加载失败" />    <br>    shields.io Get Started 页面</center><p>在制作栏中可以生成静态徽章。在 badgeContent 中输入你想要的徽章名称、颜色即可。比如制作 GitHub 个人主页徽章，只需要输入</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">GitHub-hxzsty233-blue<br></code></pre></td></tr></table></figure><p>就得到了一个徽章：<img alt="Static Badge" src="https://img.shields.io/badge/GitHub-hxzsty233-blue" style="margin: 0 2px -4px 2px "></p><p>如果想要给徽章添加 logo，可以点击 <code>+ Show optional parameters</code>，如图</p><center>    <img src="/img/shields_hide.png" style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 "    width="65%" alt="图片加载失败" />    <br></center><p>之后可以在下拉的窗口中找到 Logo 选项，填入你想要设置的 Logo 即可。比如我可以为之前的徽章添加 GitHub logo：<img alt="Static Badge" src="https://img.shields.io/badge/GitHub-hxzsty233-blue?logo=github" style="margin: 0 2px -4px 2px ">。当然，如果你填写 Java，那么你会发现 Java 的咖啡图标无法生成，这是因为 <a href="http://shields.io">shields.io</a> 的 Logo 生成基于 simple-icons 库，如果你想查找的 Logo 不在库内，那么自然无法生成。你可以在<a href="https://simpleicons.org/">这里</a>查看图标有没有包含在库内。</p><h4 id="小技巧"><a class="markdownIt-Anchor" href="#小技巧"></a> 小技巧</h4><p>如果你是直接复制 <a href="http://shields.io">shields.io</a> 给出的 Markdown 链接，那么你可能会看到这样的情况：<img src="https://img.shields.io/badge/GitHub-hxzsty233-blue?logo=github" alt="Static Badge" />，徽章和行间正文不在一条水平线上，看起来歪歪扭扭。这可能是因为徽章是作为图像导入，它的外边距设置过大。解决办法是使用 html 标签导入，在 img 属性中添加 style，示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Static Badge&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://img.shields.io/badge/GitHub-hxzsty233-blue?logo=github&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 0 2px -4px 2px &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样得到的徽标就可以完美融入行间正文了。</p><h2 id="导出-pdf-格式"><a class="markdownIt-Anchor" href="#导出-pdf-格式"></a> 导出 pdf 格式</h2><p>Markdown 转 pdf 已经有成熟的工具，比如 pandoc, prince 等等，许多 Markdown 编辑器也都支持直接导出 pdf 文件。</p><p>但是这种直接导出有一个问题，就是导出的 pdf 会在一些地方插入大片空白，使得文章看起来不连贯。而且制作的徽章也会单独成行，不好看。</p><p>这里推荐使用网页的打印功能，即先转换成 html，再使用网页的 <code>打印</code> 生成 pdf。注意：使用打印时如果还是遇到格式错误，可以先 <code>Ctrl + A</code> 全部选中，之后再打印，这样可以和你看见的格式保持一致。打印的时候记得勾选<code>更多</code>里的<code>背景图形</code>选线，否则分割线可能无法显示。</p><h1 id="使用-markdown-写作个人简介"><a class="markdownIt-Anchor" href="#使用-markdown-写作个人简介"></a> 使用 Markdown 写作个人简介</h1><p>好的个人简介可以给导师留下深刻印象。如果你想让自己的个人简介变得炫酷一点，可以使用我上面提到的徽章制作技巧。让自己的技术栈看起来更炫酷！</p><h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1><p>在写作 ospp 申请书的时候，我遇到了许多困惑。申请书的示例只有 pdf 的成品格式，缺少了很多写作的细节。我自己花了很多时间才弄明白示例是如何生产出来的，如果后来人看到我这篇文章，就可以节省很多不必要的时间，专心在项目的研究上。</p><p>我坚信，开源的核心就是分享。我所走过的弯路，别人不必再走一遍</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>ospp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桌面美化</title>
    <link href="/2024/06/04/%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    <url>/2024/06/04/%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-桌面美化"><a class="markdownIt-Anchor" href="#windows-桌面美化"></a> Windows 桌面美化</h1><h2 id="壁纸"><a class="markdownIt-Anchor" href="#壁纸"></a> 壁纸</h2><p>壁纸软件推荐 Wallpaper engine，steam 上购买，18 块的价格就可以享受到海量的动态壁纸库，还没有元气壁纸的开屏广告和流氓住存，可以说做的非常好用。壁纸提供了丰富的自定义选项，你可以控制壁纸的画质，根据电脑配置和省电需求选择合适的画质。Wallpaper 还提供了应用程序规则的自定义，可以自己设置在其他程序运行时加载壁纸。这一点和 VScode 的 windows opacity 插件结合起来简直完美，放一张图看看效果：</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 "     src="/img/Forest_wall.png" width = "65%" alt="图片加载失败 >_"/>    <br>    In the early morning forest</center><h2 id="任务栏"><a class="markdownIt-Anchor" href="#任务栏"></a> 任务栏</h2><p>任务栏自定义 Windows 11 支持的不好，不支持太多自定义。这里使用 Microsoft Store 中的 TranslucentTB 应用进行任务栏的透明化。下载好应用以后可以在系统托盘里找到，选择你希望的模式即可。我的配置是在桌面时透明，打开任何应用时启用。另外还支持选择自己喜欢的任务栏颜色。唯一美中不足的就是它没有开发文档，想要设置应用规则就没办法了。</p><h1 id="chrome-浏览器"><a class="markdownIt-Anchor" href="#chrome-浏览器"></a> Chrome 浏览器</h1><p>Google Chrome 可以设置自己喜欢的主题背景，比如我自己设置了 Harvest fest 主题，非常优雅：</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 "     src="/img/chrome_background.png" width = "65%" alt="图片加载失败 >_"/>    <br>    Chrome 中的 Harvest fest 主题效果</center><p>用户可以在 Google Chrome 的扩展商店中浏览主题背景。如果想要恢复默认设置，只需在 设置 --&gt; 外观 中选择 “重置” 即可。</p><h1 id="vscode"><a class="markdownIt-Anchor" href="#vscode"></a> VScode</h1><p>推荐 windows opacity 插件，可以让你的 VScode 透明化，在自己喜欢的背景中进行写作：</p><center>    <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 "     src="/img/forest_in_vscode.png" width = "65%" alt="图片加载失败 >_"/>    <br>    VScode 透明化效果图</center><h1 id="平板美化"><a class="markdownIt-Anchor" href="#平板美化"></a> 平板美化</h1><p>平板上可以下载 Wallpaper apk，和电脑连接后可以接受 PC 端传过来的壁纸。由于目前 Android 平板中的壁纸软件生态做的不好，而且平板需要适应横屏和竖屏两种模式，没有特别合适的壁纸软件，因此 Wallpaper engine 就显得非常优秀。</p><h1 id="移动手机"><a class="markdownIt-Anchor" href="#移动手机"></a> 移动手机</h1><p>推荐 Zedge 壁纸或者自己下载壁纸之后再设置。目前使用 Zedge，换壁纸之后 Chrome 和 Surfboard 都可以自适应系统的配色，很好看。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美化 Windows vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown写作</title>
    <link href="/2024/05/30/Markdown%E5%86%99%E4%BD%9C/"/>
    <url>/2024/05/30/Markdown%E5%86%99%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown-写作"><a class="markdownIt-Anchor" href="#markdown-写作"></a> Markdown 写作</h1><h2 id="1markdown-介绍"><a class="markdownIt-Anchor" href="#1markdown-介绍"></a> 1.Markdown 介绍</h2><p><code>Markdown</code> 是一种轻量级标记语言。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。什么叫“标记语言”呢？简单来说，就是通过符号控制文本的格式，比如使用 <code>*a*</code> 生成斜体 <em>a</em>，<code>**a**</code> 生成加粗 <strong>a</strong>。与 <code>Microsoft Word</code> 和 <code>LaTeX</code> 这样的排版格式相比，<code>Markdown</code> 聚焦于纯文本，“所见即所得”的设计哲学使用户得以专注于内容本身。</p><h2 id="2语法"><a class="markdownIt-Anchor" href="#2语法"></a> 2.语法</h2><p>Markdown 中，<code>#</code> 控制标题大小，行间使用 <code>*</code> 和 <code>**</code> 生成斜体和粗体，``` 可以用于插入代码块。</p><p>Markdown 兼容 HTML 语法，一些 Markdown 编辑器也支持 LaTeX 数学公式输入。</p><p>详细语法可以参见<a href="https://markdown.com.cn/basic-syntax/">教程</a></p><h2 id="3编辑器"><a class="markdownIt-Anchor" href="#3编辑器"></a> 3.编辑器</h2><p>最著名的 Markdown 编辑器当属 <code>Typora</code> ，79块钱支持三台设备使用。当然，如果你想使用免费开源的编辑器，你也可以使用 <code>Marktext</code>，<a href="https://www.marktext.cc/">Marktext 官网</a>。或者像笔者一样，使用 VScode 加上插件。</p><h2 id="4插件"><a class="markdownIt-Anchor" href="#4插件"></a> 4.插件</h2><p>VScode 中 markdown 插件不少，这里推荐 <code>Markdown Preview Enhanced</code>，支持代码即时预览，可以为文档自动生成目录。还可以下载 <code>Office Viewer</code>，除了 Markdown 还支持 excel, pdf 等多种文件格式。</p><h2 id="5小技巧"><a class="markdownIt-Anchor" href="#5小技巧"></a> 5.小技巧</h2><p>Markdown 中可以插入 <img src="https://img.shields.io/badge/GitHub-black?logo=GitHub" alt="Static Badge" />徽标，具体请看<a href="https://shields.io">shields.io</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandoc简单使用</title>
    <link href="/2024/05/30/Pandoc%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/05/30/Pandoc%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="pandoc简单使用"><a class="markdownIt-Anchor" href="#pandoc简单使用"></a> Pandoc简单使用</h1><h2 id="1什么是-pandoc"><a class="markdownIt-Anchor" href="#1什么是-pandoc"></a> 1.什么是 Pandoc ?</h2><h3 id="1简介"><a class="markdownIt-Anchor" href="#1简介"></a> 1.简介</h3><p>Pandoc 是一个基于 <code>GPL</code> 协议开源的免费命令行软件，由加州大学伯克利分校哲学系教授 John MacFarlane 使用 <code>Haskell</code> 语言开发，目前另一位核心开发者是来自德国的 Albert Krewinkel。截止 2022 年 12 月 10 日，Pandoc 的 GitHub 仓库拥有超过 27,000 个 Star，3,000 次 Fork。</p><h3 id="2下载"><a class="markdownIt-Anchor" href="#2下载"></a> 2.下载</h3><h4 id="1windows"><a class="markdownIt-Anchor" href="#1windows"></a> 1.Windows</h4><p>可以使用官方的<a href="https://github.com/jgm/pandoc/releases/latest">下载程序</a>，或者在 <code>PowerShell</code> 中运行如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">winget install <span class="hljs-literal">--source</span> winget <span class="hljs-literal">--exact</span> <span class="hljs-literal">--id</span> JohnMacFarlane.Pandoc<br></code></pre></td></tr></table></figure><h4 id="2liunx-or-macos"><a class="markdownIt-Anchor" href="#2liunx-or-macos"></a> 2.Liunx or MacOS</h4><p>参见<a href="https://pandoc.org/installing.html">官方文档</a></p><h3 id="3功能文本转换的瑞士军刀"><a class="markdownIt-Anchor" href="#3功能文本转换的瑞士军刀"></a> 3.功能——文本转换的“瑞士军刀”</h3><p>Pandoc 可以将 markdown 文本转换成 docx, pdf 等不同格式，一个简单的命令示范如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pandoc test_markdown.md -o test_docx.docx<br></code></pre></td></tr></table></figure><p>其中，<code>pandoc</code> 命令启用 <code>pandoc</code> 命令行工具，<code>-o</code> 是选项 <code>--output</code> 的简写，可以转换文档格式。</p><p>转换生成的 <code>test_docx.docx</code> 文件将会放置在工作目录下。注意，<code>pandoc</code> 生成的 <code>.docx</code> 文件将会丢失原文件中的超链接，因此对于纯文本文件比较适用。</p><p>Pandoc 也可以将 markdown 转换成 pdf 格式，但是需要用户提供 latex 引擎。一个理想的引擎是 xelatex ，对于中文的支持更好，可以通过安装 TexLive 获得。一个使用 xelatex 引擎进行转换的例子如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pandoc test_markdown.md -o test_pdf.pdf --pdf-engine=xelatex<br></code></pre></td></tr></table></figure><p>由于系统字体不同，pandoc 可能会报错，需要装对于中文支持更好的字体。</p><p>Pandoc 也提供了自定义的选项，用户可以自建模板对 pdf 进行格式化，比如使用 <code>eisvogel</code> 模板：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pandoc test_markdown.md -o test_pdf.pdf --pdf-engine=xelatex -template=template/eisvogel.latex<br></code></pre></td></tr></table></figure><p>这里将模板存放在工作目录中的 <code>template</code> 文件夹中，执行命令就可以看到输出的 pdf 文件了。</p><h2 id="2pandoc扩展知识"><a class="markdownIt-Anchor" href="#2pandoc扩展知识"></a> 2.Pandoc扩展知识</h2><h3 id="pandoc-官方文档"><a class="markdownIt-Anchor" href="#pandoc-官方文档"></a> <a href="https://pandoc.org/getting-started.html">Pandoc 官方文档</a></h3><h3 id="pandoc-从入门到精通少数派"><a class="markdownIt-Anchor" href="#pandoc-从入门到精通少数派"></a> <a href="https://sspai.com/post/77206">Pandoc 从入门到精通|少数派</a></h3><h3 id="从-markdown-到-pandoc"><a class="markdownIt-Anchor" href="#从-markdown-到-pandoc"></a> <a href="https://sspai.com/post/64842">从 Markdown 到 Pandoc</a></h3>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandoc</tag>
      
      <tag>文档转换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为了在梦里飞翔</title>
    <link href="/2024/05/26/%E4%B8%BA%E4%BA%86%E5%9C%A8%E6%A2%A6%E9%87%8C%E9%A3%9E%E7%BF%94/"/>
    <url>/2024/05/26/%E4%B8%BA%E4%BA%86%E5%9C%A8%E6%A2%A6%E9%87%8C%E9%A3%9E%E7%BF%94/</url>
    
    <content type="html"><![CDATA[<h1 id="为了在梦里飞翔"><a class="markdownIt-Anchor" href="#为了在梦里飞翔"></a> 为了在梦里飞翔</h1><h2 id="不是每一夜都能做这样的好梦"><a class="markdownIt-Anchor" href="#不是每一夜都能做这样的好梦"></a> 不是每一夜都能做这样的好梦</h2><h3 id="1汉克施拉德"><a class="markdownIt-Anchor" href="#1汉克施拉德"></a> 1.汉克·施拉德</h3><p>我想我永远不会忘记那个明媚的下午。</p><p>那时我还是在街巷里奔跑的孩子。汉克·施拉德出现在他家门口，这不常见，我们知道这位可贵的缉毒局探员只能坐在轮椅上，这真可惜，他以前那么威风。</p><p>我们孩子在巷子里追追打打，汉克摇着他的轮椅，从巷子一边走到另一边。脸上没有表情，我看不出他到底是在想些什么。也许是在抱怨命运，谁知道呢，可能是在遗憾失去和老婆恩爱的能力。但是事情很快变得不一样，我们看到汉克在巷子的另一端，从椅子上站起来了。他颤颤巍巍地走着，落下每一步的瞬间脸上的肌肉都瞬间咬紧。我就这样，看着他喘着粗气，从轮椅上走回了家。</p><p>汉克可以直立行走了，这是个好消息。</p><h3 id="2武汉"><a class="markdownIt-Anchor" href="#2武汉"></a> 2.武汉</h3><p>在梦里我路过武汉，陌生的城市拥有宏伟的电视塔，横梁飞上云端，庞大的建筑面前我们仿佛虫子一样渺小。虫子到了转盘，深夜的转盘背后是沧桑的古塔，青绿的砖瓦隐藏在温柔的夜色中，偶尔在橘黄色的夜灯中露面。</p><p>在医院我看到自己的脸被印在保健品的外壳，这是妈妈做的吗？我看向她，她却不看跟她打招呼的同事，拉着我们出了医院。</p><h2 id="做梦"><a class="markdownIt-Anchor" href="#做梦"></a> 做梦</h2><p>不是每一夜都能做这样的好梦。梦里壮丽的景色，我从未见过。</p><p>做梦是囚犯唯一对自由的体验，也是终极的体验。人总有着束缚，因此渴望着超越，渴望成为超越者。希伯来人创造了万能的上帝，我们创造了没有欲望的圣人。现代的偶像利用对超越的向往打造纸牌上的国王，无比华丽却不可能进入现实；诗人们给自己找到女神，少年们梦想着成人。梦里的我拥有最大限度的自由，我是世界的造物主。世间的一切都有缺陷，只有在梦中：才有自由，绝对的、不可剥夺的自由。</p><p>永远不要放弃做梦，梦境是超越性的究极体验。它摆脱了所有的确定性，自由的伸展，揭示出另一种、全新的可能。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打字网站分享</title>
    <link href="/2024/05/03/%E6%89%93%E5%AD%97%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB/"/>
    <url>/2024/05/03/%E6%89%93%E5%AD%97%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>如果你已经厌倦了金山打字通的页面，又想快速提高打字能力，那么你可能需要以下的打字网站：</p><ol><li><p><a href="https://edclub.com">edclub</a></p><p>edclub的Typing Jungle是我遇到的最舒适的打字练习界面，600多个课程练习下来，打字速度基本上可以稳定在50wpm以上，平常输入绰绰有余。而且这个网站大部分内容都是免费的，不开高级会员完全不影响打字练习，并且提供了丰富多彩的课程练习。美中不足的是中文语法只支持全拼输入，并且只能练习拼音，打字输入体验不算好（另外会时不时被墙），如果希望练习英文输入，这个网站是首选</p></li><li><p><a href="https://qwerty.kaiyi.cool/">Qwerty</a></p><p>这是一个把打字和英语学习结合起来的网站，类似不背单词的输入检验，用户可以边打字边背四六级单词。另外，网站还内置了程序员语料库，提供pyhon之类的程序常用语句练习。访问项目的GitHub主页了解更多信息：<a href="https://github.com/RealKai42/qwerty-learner">https://github.com/RealKai42/qwerty-learner</a></p></li></ol><p>打字技能是我目前觉得最基础、最实用的技能，它让我对电脑更熟悉，提高了我的效率。我强烈建议每一个人都学会盲打，这只需要一个星期不到的训练，但是它会大大提高你对电脑的熟练度</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Termux简介</title>
    <link href="/2024/05/03/Andriod%E7%AB%AF%E7%9A%84%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94termux%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/05/03/Andriod%E7%AB%AF%E7%9A%84%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94termux%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="termux-in-andriod"><a class="markdownIt-Anchor" href="#termux-in-andriod"></a> Termux in Andriod</h1><p>Andriod 端的命令行终端：<a href="https://termux.dev/en/">Termux</a></p><p>入手了xiaomi pad 6之后，我想要在 Andriod 端做一些简单的编程开发，第一个想到的就是下载 <code>VScode</code>，但是它没有 Andriod 发行版…（不可能，我一定要在平板上跑vscode），于是我开始折腾终端环境。在被 Node.js 的发行版反复折磨之后，我终于发现原来 Termux 的包管理工具 <code>pkg</code> 中就自带了 <code>VScode</code>(code server)。嗯，看起来不错，终于能在 localhost:4000 看到熟悉的 Visual Studio code 页面了，但是这个启动速度实在太慢了，JavaScript 果然是依托。在编辑我的 bash 配置时，我使用了 vim ，从此发现新天地…由于我的电脑是游戏本，携带过于笨重，所以有时一台平板也可以成为我的开发平台，更加便携</p><p>安装 Termux 之后，可以开启设备的存储权限:<code>termux-setup-storage</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Termux-setup-storage - Termux Wiki](https://wiki.termux.com/wiki/Termux-setup-storage)">[1]</span></a></sup>, 之后使用 <code>cd</code>命令导航进入 <code>storage</code>目录即可</p><p>接下来可以使用 Termux 的包管理工具 <code>pkg</code>，首先使用 <code>pkg upgrade</code>更新安装库，之后可以使用 <code>pkg install</code>命令安装库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs textile">pkg install python c java git <br></code></pre></td></tr></table></figure><p>注意 <code>pkg install</code>命令可以接受多个参数</p><p>简单的环境配置之后就可以进行编程开发。由于 Termux 是类 Linux 环境，支持原生 vim 编辑器，因此使用 vim 可以带来极为舒爽的编程体验，关于 vim 这里只介绍几个简单的编辑模式：</p><p>按键 [i] 进入 <code>insert</code>插入模式，命令行指令 <code>:wq</code>保存编辑并退出，另外可以通过[h][j][k][l]控制方向，完全解放右手不碰鼠标</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wiki.termux.com/wiki/Termux-setup-storage">Termux-setup-storage - Termux Wiki</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Termux</tag>
      
      <tag>Andriod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git命令简记</title>
    <link href="/2024/03/30/git%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/"/>
    <url>/2024/03/30/git%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="情况说明"><a class="markdownIt-Anchor" href="#情况说明"></a> 情况说明：</h1><p>昨天晚上，在2个小时的debug之后，我终于成功重构了我的数据处理程序，让它看起来没那么简陋了。下一步的工作是更新github上的repo，之前使用过git来提交我的博客文章，所以这次我决定也使用git来提交我的代码。嗯，没得说，又是一个多小时的折腾，经过与gpt来来回回的反复扯皮，我终于是搞清楚了git的几个简单命令，现在我要把它们记录在册，免得下次使用还是记不得</p><h1 id="使用git上传本地代码到github上的简单方法"><a class="markdownIt-Anchor" href="#使用git上传本地代码到github上的简单方法"></a> 使用git上传本地代码到github上的简单方法</h1><h3 id="第一步cmd导航到对应的文件夹"><a class="markdownIt-Anchor" href="#第一步cmd导航到对应的文件夹"></a> 第一步，cmd导航到对应的文件夹</h3><p>可以使用cd命令一个文件夹一个文件夹地找过去，也可以直接cd #文件路径直接找到目标文件夹。注意，切换盘符时不使用cd命令，直接输入对应的盘符即可。比如从C盘切换到D盘，输入D:即可</p><h3 id="第二步绑定ssh密钥"><a class="markdownIt-Anchor" href="#第二步绑定ssh密钥"></a> 第二步，绑定ssh密钥</h3><p>这一步因为我之前上传博客文章的时候已经做过，所以掠过。注意，git不仅支持ssh绑定，也可以输入仓库的url，只是这样每次传文件的时候都需要登录github(输入账号密码)</p><h3 id="第三步初始化git仓库命令git-init"><a class="markdownIt-Anchor" href="#第三步初始化git仓库命令git-init"></a> 第三步，初始化git仓库，命令：git init</h3><p>这一步将你的本地代码文件夹变成了本地代码仓库</p><h3 id="第四步添加文件到本地仓库git-add"><a class="markdownIt-Anchor" href="#第四步添加文件到本地仓库git-add"></a> 第四步，添加文件到本地仓库：git add .</h3><p>git add是添加文件命令， .表示添加文件夹内全部代码，你也可以指定添加的文件路径</p><h3 id="第五步查看本地分支命令git-branch"><a class="markdownIt-Anchor" href="#第五步查看本地分支命令git-branch"></a> 第五步，查看本地分支，命令：git branch</h3><p>由于github在2020年做了一次更新，所有repo的默认主分支从master改成了main，而git并没有追随这一改动，造成了本地主分支名和远程仓库主分支名不一致，所以需要查看本地主分支名。如果不一致则需要修改</p><h3 id="第六步修改本地分支名命令git-branch-m-master-main"><a class="markdownIt-Anchor" href="#第六步修改本地分支名命令git-branch-m-master-main"></a> 第六步，修改本地分支名，命令：git branch -m master main</h3><p>这一步将主分支从master重命名到main</p><h3 id="第七步添加远程仓库命令git-remote-add-origin-gitgithubcomusernamerepogit"><a class="markdownIt-Anchor" href="#第七步添加远程仓库命令git-remote-add-origin-gitgithubcomusernamerepogit"></a> 第七步，添加远程仓库，命令：git remote add origin <a href="mailto:git@github.com">git@github.com</a>:username/repo.git</h3><p>这里的username和repo分别是你的github用户名和仓库名。origin是你本地仓库的命名，习惯上用origin，你也可以指定其他的名字</p><h3 id="第八步将本地分支推送到远程仓库命令git-push-u-origin-main"><a class="markdownIt-Anchor" href="#第八步将本地分支推送到远程仓库命令git-push-u-origin-main"></a> 第八步，将本地分支推送到远程仓库，命令：git push -u origin main</h3><p>这个命令会将本地的分支推送到远程仓库的分支中，并在远程仓库中创建与本地分支同名的分支。注意，如果远程仓库中已经存在该分支，该命令会提示推送失败。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站小记</title>
    <link href="/2024/03/09/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    <url>/2024/03/09/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一些小说明"><a class="markdownIt-Anchor" href="#一些小说明"></a> 一些小说明</h1><p>本站使用Hexo静态网站框架搭建，主要用来存放我的一些想法、随笔和技术分享。我曾经想过不使用框架，全部使用HTML&amp;CSS&amp;Javascript，但是后来才发现这是多么惊人的工作量&gt;__&lt;</p><p>好在我很快迷途知返，很快就确定了Hexo + Github托管的方案。有兴趣的朋友可以看看知乎上的教程和Hexo的文档，讲的还是比较全面的。不懂的地方问问AI，基本上也不会有什么瓶颈。</p><h2 id="我为什么要做个人博客"><a class="markdownIt-Anchor" href="#我为什么要做个人博客"></a> 我为什么要做个人博客？</h2><p>因为酷啊！（笑）在互联网的森林里拥有一片自己的绿茵，简直是一件酷到不能再酷的事情。其实，现有的博客平台，比如知乎、微博和CSDN等，虽然很方便，可伸展性却不如自己的网站。作为一个爱折腾的人，我比较喜欢自己来定义我的空间。别人的模板固然好用，但自己造的轮子才最亲切。</p><h3 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h3><p><a href="https://hexo.io/zh-cn/">Hexo</a></p><p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/08/hello-world/"/>
    <url>/2024/03/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
